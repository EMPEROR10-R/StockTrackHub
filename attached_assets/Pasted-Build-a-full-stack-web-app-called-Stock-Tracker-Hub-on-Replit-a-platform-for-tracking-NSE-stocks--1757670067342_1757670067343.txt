Build a full-stack web app called 'Stock Tracker Hub' on Replit, a platform for tracking NSE stocks with tiered memberships. Use Node.js with Express for the backend, React for the frontend, and Replit's built-in Database for storage. No third-party APIs or services—simulate stock data (e.g., NSE stocks like Safaricom 'SCOM.JO' at random prices $20–30 USD, Equity Group $15–25) using simple JS arrays or mock timers for 'live' updates. Include login/signup with session-based authentication, and an admin panel with username 'ADMIN-YOO' and password '@unruly10'. Enable tiered memberships: Free ($0, basic tracking), Bronze ($5/month, watchlist + 5 alerts), Silver ($15/month, advanced charts + 20 alerts), Gold ($30/month, unlimited alerts + portfolio analysis), Diamond ($50/month, all Gold + VIP priority support). Currency in USD, but simulate M-Pesa conversion (1 USD = 130 KSh) for deposits/withdrawals using manual input fields and console logs for simulation (no real payments).
Key features:

User Authentication: Signup/login form with email, password (hashed with bcrypt), username. Use Replit secrets for session key (e.g., SECRET_KEY). Validate inputs to prevent injection; rate-limit login attempts (simple DB counter, 5 tries/hour).
Dashboard: After login, show user profile, tier level, USD balance (starting $0), watchlist of stocks, simulated real-time prices (update every 30s via setInterval). Display tier benefits and upgrade button. Dark theme with green/blue accents (Tailwind CSS via CDN), responsive for mobile, use Chart.js (npm) for price charts.
Membership Tiers: Users upgrade via simulated payment form (input KSh amount, convert to USD at 130:1, deduct fee, update tier in DB). Admin approves upgrades in panel. Reasonable pricing: Tiers as above, gigs/projects not needed—focus on stock features (e.g., Free: Basic prices; Diamond: Simulated alerts via in-app notifications).
Stock Tracking: Users add NSE stocks to watchlist (e.g., Safaricom, KCB, Equity). Show mock prices, historical charts (generate random data), alerts (e.g., 'Price below $25' for premium tiers). Simulate portfolio (buy/sell virtual shares with balance).
Payment Simulation: Deposit form (input KSh, convert to USD, add to balance, log to console). Withdrawal form (convert USD to KSh, log request for admin approval). Admin panel views all user balances, approves withdrawals (console log simulation).
Security: Bcrypt for passwords, express-session for auth (secure cookies), sanitize all inputs (e.g., xss-clean or manual escaping), rate-limit endpoints (simple middleware counter). Store sensitive data (e.g., session secret) in Replit secrets.
Admin Panel: Accessible only with 'ADMIN-YOO'/'@unruly10'. View/manage user balances, approve withdrawals/upgrades, reset tiers, see all watchlists/alerts (DB query).
Additional Enhancements: Add notifications (in-app DB-stored alerts), portfolio summary (total value in USD), conversion calculator for M-Pesa. Reasonable amounts: Deposits $10 min (KSh 1,300), withdrawals $5 min. Gamify with badges for active tracking. Include disclaimer: 'Simulated data for educational use.'

Generate the full codebase: server.js for backend (routes for auth, stocks, payments), React components for frontend (App.js, Login.js, Dashboard.js, Admin.js), package.json with dependencies (express, bcrypt, express-session, chart.js, react-chartjs-2). Setup Replit DB schema (users table: id, email, password_hash, username, tier, balance_usd; watchlists table: user_id, stock_symbol; alerts table: user_id, stock, threshold). Provide run instructions: 'npm install && node server.js' in console. Ensure secure, responsive design with Tailwind