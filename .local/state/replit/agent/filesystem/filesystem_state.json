{"file_contents":{"app.py":{"content":"import streamlit as st\nimport sqlite3\nfrom auth import authenticate_user, register_user, hash_password\nfrom database import init_database\nimport os\n\n# Initialize database\ninit_database()\n\n# Set page config\nst.set_page_config(\n    page_title=\"Stock Tracker Hub\",\n    page_icon=\"📈\",\n    layout=\"wide\",\n    initial_sidebar_state=\"expanded\"\n)\n\n# Initialize session state\nif 'authenticated' not in st.session_state:\n    st.session_state.authenticated = False\nif 'username' not in st.session_state:\n    st.session_state.username = None\nif 'user_id' not in st.session_state:\n    st.session_state.user_id = None\nif 'is_admin' not in st.session_state:\n    st.session_state.is_admin = False\n\ndef main():\n    if not st.session_state.authenticated:\n        show_auth_page()\n    else:\n        show_main_app()\n\ndef show_auth_page():\n    st.title(\"📈 Stock Tracker Hub\")\n    st.markdown(\"### Real-time NSE Stock Tracking with M-Pesa Integration\")\n    \n    col1, col2 = st.columns(2)\n    \n    with col1:\n        st.subheader(\"Login\")\n        with st.form(\"login_form\"):\n            login_username = st.text_input(\"Username\")\n            login_password = st.text_input(\"Password\", type=\"password\")\n            login_submit = st.form_submit_button(\"Login\")\n            \n            if login_submit:\n                user = authenticate_user(login_username, login_password)\n                if user:\n                    st.session_state.authenticated = True\n                    st.session_state.username = user[3]  # username\n                    st.session_state.user_id = user[0]   # user_id\n                    st.session_state.is_admin = (user[3] == 'admin' and login_password == '@unruly10')\n                    st.rerun()\n                else:\n                    st.error(\"Invalid credentials\")\n    \n    with col2:\n        st.subheader(\"Register\")\n        with st.form(\"register_form\"):\n            reg_email = st.text_input(\"Email\")\n            reg_username = st.text_input(\"Username\")\n            reg_password = st.text_input(\"Password\", type=\"password\")\n            reg_confirm_password = st.text_input(\"Confirm Password\", type=\"password\")\n            reg_submit = st.form_submit_button(\"Register\")\n            \n            if reg_submit:\n                if reg_password != reg_confirm_password:\n                    st.error(\"Passwords do not match\")\n                elif len(reg_password) < 6:\n                    st.error(\"Password must be at least 6 characters\")\n                elif not reg_email or not reg_username:\n                    st.error(\"Email and username are required\")\n                else:\n                    success, message = register_user(reg_email, reg_username, reg_password)\n                    if success:\n                        st.success(\"Registration successful! Please login.\")\n                    else:\n                        st.error(message)\n\ndef show_main_app():\n    # Sidebar navigation\n    st.sidebar.title(f\"Welcome, {st.session_state.username}\")\n    \n    # Get user info\n    conn = sqlite3.connect('stock_tracker.db')\n    cursor = conn.cursor()\n    cursor.execute(\"SELECT tier, balance_usd FROM users WHERE id = ?\", (st.session_state.user_id,))\n    user_info = cursor.fetchone()\n    conn.close()\n    \n    if user_info:\n        tier, balance = user_info\n        st.sidebar.metric(\"Current Tier\", tier)\n        st.sidebar.metric(\"Wallet Balance\", f\"${balance:.2f}\")\n    \n    # Navigation menu\n    pages = [\"Dashboard\", \"Portfolio\", \"Wallet\"]\n    if st.session_state.is_admin:\n        pages.append(\"Admin Panel\")\n    \n    selected_page = st.sidebar.selectbox(\"Navigate to\", pages)\n    \n    # Logout button\n    if st.sidebar.button(\"Logout\"):\n        st.session_state.authenticated = False\n        st.session_state.username = None\n        st.session_state.user_id = None\n        st.session_state.is_admin = False\n        st.rerun()\n    \n    # Load selected page\n    if selected_page == \"Dashboard\":\n        import pages.dashboard as dashboard\n        dashboard.show()\n    elif selected_page == \"Portfolio\":\n        import pages.portfolio as portfolio\n        portfolio.show()\n    elif selected_page == \"Wallet\":\n        import pages.wallet as wallet\n        wallet.show()\n    elif selected_page == \"Admin Panel\" and st.session_state.is_admin:\n        import pages.admin as admin\n        admin.show()\n\nif __name__ == \"__main__\":\n    main()\n","size_bytes":4368},"auth.py":{"content":"import bcrypt\nimport sqlite3\nimport re\n\ndef hash_password(password):\n    \"\"\"Hash a password using bcrypt\"\"\"\n    return bcrypt.hashpw(password.encode('utf-8'), bcrypt.gensalt()).decode('utf-8')\n\ndef verify_password(password, hashed):\n    \"\"\"Verify a password against its hash\"\"\"\n    return bcrypt.checkpw(password.encode('utf-8'), hashed.encode('utf-8'))\n\ndef validate_email(email):\n    \"\"\"Validate email format\"\"\"\n    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$'\n    return re.match(pattern, email) is not None\n\ndef validate_username(username):\n    \"\"\"Validate username format\"\"\"\n    pattern = r'^[a-zA-Z0-9_]{3,20}$'\n    return re.match(pattern, username) is not None\n\ndef register_user(email, username, password):\n    \"\"\"Register a new user\"\"\"\n    # Validate inputs\n    if not validate_email(email):\n        return False, \"Invalid email format\"\n    \n    if not validate_username(username):\n        return False, \"Username must be 3-20 characters, letters, numbers, and underscores only\"\n    \n    if len(password) < 6:\n        return False, \"Password must be at least 6 characters\"\n    \n    conn = sqlite3.connect('stock_tracker.db')\n    cursor = conn.cursor()\n    \n    try:\n        # Check if email or username already exists\n        cursor.execute(\"SELECT id FROM users WHERE email = ? OR username = ?\", (email, username))\n        if cursor.fetchone():\n            conn.close()\n            return False, \"Email or username already exists\"\n        \n        # Hash password and insert user\n        password_hash = hash_password(password)\n        cursor.execute(\n            \"INSERT INTO users (email, password_hash, username) VALUES (?, ?, ?)\",\n            (email, password_hash, username)\n        )\n        \n        conn.commit()\n        conn.close()\n        return True, \"Registration successful\"\n        \n    except sqlite3.Error as e:\n        conn.close()\n        return False, f\"Database error: {str(e)}\"\n\ndef authenticate_user(username, password):\n    \"\"\"Authenticate a user\"\"\"\n    conn = sqlite3.connect('stock_tracker.db')\n    cursor = conn.cursor()\n    \n    cursor.execute(\"SELECT * FROM users WHERE username = ?\", (username,))\n    user = cursor.fetchone()\n    conn.close()\n    \n    if user and verify_password(password, user[2]):  # user[2] is password_hash\n        return user\n    return None\n","size_bytes":2322},"database.py":{"content":"import sqlite3\nimport os\n\ndef init_database():\n    \"\"\"Initialize the SQLite database with required tables\"\"\"\n    conn = sqlite3.connect('stock_tracker.db')\n    cursor = conn.cursor()\n    \n    # Users table\n    cursor.execute('''\n        CREATE TABLE IF NOT EXISTS users (\n            id INTEGER PRIMARY KEY AUTOINCREMENT,\n            email TEXT UNIQUE NOT NULL,\n            password_hash TEXT NOT NULL,\n            username TEXT UNIQUE NOT NULL,\n            tier TEXT DEFAULT 'Free',\n            balance_usd REAL DEFAULT 0.0,\n            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n        )\n    ''')\n    \n    # Transactions table\n    cursor.execute('''\n        CREATE TABLE IF NOT EXISTS transactions (\n            id INTEGER PRIMARY KEY AUTOINCREMENT,\n            user_id INTEGER NOT NULL,\n            transaction_type TEXT NOT NULL,\n            amount_usd REAL NOT NULL,\n            amount_ksh REAL,\n            mpesa_receipt TEXT,\n            status TEXT DEFAULT 'pending',\n            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n            FOREIGN KEY (user_id) REFERENCES users (id)\n        )\n    ''')\n    \n    # Watchlists table\n    cursor.execute('''\n        CREATE TABLE IF NOT EXISTS watchlists (\n            id INTEGER PRIMARY KEY AUTOINCREMENT,\n            user_id INTEGER NOT NULL,\n            stock_symbol TEXT NOT NULL,\n            added_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n            FOREIGN KEY (user_id) REFERENCES users (id),\n            UNIQUE(user_id, stock_symbol)\n        )\n    ''')\n    \n    # Portfolio table\n    cursor.execute('''\n        CREATE TABLE IF NOT EXISTS portfolio (\n            id INTEGER PRIMARY KEY AUTOINCREMENT,\n            user_id INTEGER NOT NULL,\n            stock_symbol TEXT NOT NULL,\n            quantity INTEGER NOT NULL,\n            purchase_price REAL NOT NULL,\n            purchase_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n            FOREIGN KEY (user_id) REFERENCES users (id)\n        )\n    ''')\n    \n    # Alerts table\n    cursor.execute('''\n        CREATE TABLE IF NOT EXISTS alerts (\n            id INTEGER PRIMARY KEY AUTOINCREMENT,\n            user_id INTEGER NOT NULL,\n            stock_symbol TEXT NOT NULL,\n            alert_type TEXT NOT NULL,\n            threshold_price REAL NOT NULL,\n            is_active BOOLEAN DEFAULT 1,\n            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n            FOREIGN KEY (user_id) REFERENCES users (id)\n        )\n    ''')\n    \n    # Create admin user if not exists\n    cursor.execute(\"SELECT id FROM users WHERE username = 'admin'\")\n    if not cursor.fetchone():\n        from auth import hash_password\n        admin_hash = hash_password('@unruly10')\n        cursor.execute(\n            \"INSERT INTO users (email, password_hash, username, tier, balance_usd) VALUES (?, ?, ?, ?, ?)\",\n            ('admin@stocktracker.com', admin_hash, 'admin', 'Diamond', 10000.0)\n        )\n    \n    conn.commit()\n    conn.close()\n\ndef get_user_tier_limits(tier):\n    \"\"\"Get tier-specific limits and features\"\"\"\n    tier_config = {\n        'Free': {\n            'watchlist_limit': 5,\n            'portfolio_limit': 0,\n            'alerts_limit': 0,\n            'real_time_data': False,\n            'price': 0\n        },\n        'Silver': {\n            'watchlist_limit': 20,\n            'portfolio_limit': 10,\n            'alerts_limit': 5,\n            'real_time_data': True,\n            'price': 10  # USD\n        },\n        'Gold': {\n            'watchlist_limit': 50,\n            'portfolio_limit': 25,\n            'alerts_limit': 15,\n            'real_time_data': True,\n            'price': 25  # USD\n        },\n        'Diamond': {\n            'watchlist_limit': 100,\n            'portfolio_limit': 50,\n            'alerts_limit': 30,\n            'real_time_data': True,\n            'price': 50  # USD\n        }\n    }\n    return tier_config.get(tier, tier_config['Free'])\n","size_bytes":3876},"mpesa_client.py":{"content":"import requests\nfrom requests.auth import HTTPBasicAuth\nimport base64\nfrom datetime import datetime\nimport json\nimport os\nimport streamlit as st\n\nclass MpesaClient:\n    def __init__(self, environment='sandbox'):\n        self.consumer_key = os.getenv('MPESA_CONSUMER_KEY', 'your_consumer_key')\n        self.consumer_secret = os.getenv('MPESA_CONSUMER_SECRET', 'your_consumer_secret')\n        self.environment = environment\n        \n        if environment == 'sandbox':\n            self.base_url = 'https://sandbox.safaricom.co.ke'\n            self.business_short_code = \"174379\"\n            self.passkey = \"bfb279f9aa9bdbcf158e97dd71a467cd2e0c893059b10f78e6b72ada1ed2c919\"\n        else:\n            self.base_url = 'https://api.safaricom.co.ke'\n            self.business_short_code = os.getenv('MPESA_SHORTCODE', '174379')\n            self.passkey = os.getenv('MPESA_PASSKEY', 'your_passkey')\n    \n    def get_access_token(self):\n        \"\"\"Generate access token for API authentication\"\"\"\n        url = f\"{self.base_url}/oauth/v1/generate?grant_type=client_credentials\"\n        \n        try:\n            response = requests.get(\n                url, \n                auth=HTTPBasicAuth(self.consumer_key, self.consumer_secret),\n                timeout=30\n            )\n            \n            if response.status_code == 200:\n                return response.json().get('access_token')\n            else:\n                st.error(f\"Failed to get access token: {response.text}\")\n                return None\n                \n        except requests.exceptions.RequestException as e:\n            st.error(f\"Network error getting access token: {str(e)}\")\n            return None\n    \n    def stk_push(self, phone_number, amount, account_reference, transaction_desc, callback_url):\n        \"\"\"Initiate STK Push request\"\"\"\n        access_token = self.get_access_token()\n        \n        if not access_token:\n            return {\"success\": False, \"error\": \"Failed to get access token\"}\n        \n        # Clean phone number (remove spaces, dashes, etc.)\n        phone_number = phone_number.replace(\" \", \"\").replace(\"-\", \"\").replace(\"+\", \"\")\n        \n        # Ensure phone number starts with 254\n        if phone_number.startswith(\"0\"):\n            phone_number = \"254\" + phone_number[1:]\n        elif not phone_number.startswith(\"254\"):\n            phone_number = \"254\" + phone_number\n        \n        # STK Push URL\n        url = f\"{self.base_url}/mpesa/stkpush/v1/processrequest\"\n        \n        # Headers\n        headers = {\n            'Authorization': f'Bearer {access_token}',\n            'Content-Type': 'application/json'\n        }\n        \n        # Generate password\n        timestamp = datetime.now().strftime('%Y%m%d%H%M%S')\n        password_string = self.business_short_code + self.passkey + timestamp\n        password = base64.b64encode(password_string.encode()).decode('utf-8')\n        \n        # Request payload\n        payload = {\n            \"BusinessShortCode\": self.business_short_code,\n            \"Password\": password,\n            \"Timestamp\": timestamp,\n            \"TransactionType\": \"CustomerPayBillOnline\",\n            \"Amount\": int(amount),\n            \"PartyA\": phone_number,\n            \"PartyB\": self.business_short_code,\n            \"PhoneNumber\": phone_number,\n            \"CallBackURL\": callback_url,\n            \"AccountReference\": account_reference,\n            \"TransactionDesc\": transaction_desc\n        }\n        \n        try:\n            response = requests.post(url, json=payload, headers=headers, timeout=30)\n            result = response.json()\n            \n            if response.status_code == 200 and result.get('ResponseCode') == '0':\n                return {\n                    \"success\": True,\n                    \"checkout_request_id\": result.get('CheckoutRequestID'),\n                    \"merchant_request_id\": result.get('MerchantRequestID'),\n                    \"customer_message\": result.get('CustomerMessage')\n                }\n            else:\n                return {\n                    \"success\": False,\n                    \"error\": result.get('errorMessage', 'STK Push failed'),\n                    \"error_code\": result.get('errorCode')\n                }\n                \n        except requests.exceptions.RequestException as e:\n            return {\"success\": False, \"error\": f\"Network error: {str(e)}\"}\n    \n    def query_stk_status(self, checkout_request_id):\n        \"\"\"Query STK Push transaction status\"\"\"\n        access_token = self.get_access_token()\n        \n        if not access_token:\n            return {\"success\": False, \"error\": \"Failed to get access token\"}\n        \n        url = f\"{self.base_url}/mpesa/stkpushquery/v1/query\"\n        \n        headers = {\n            'Authorization': f'Bearer {access_token}',\n            'Content-Type': 'application/json'\n        }\n        \n        timestamp = datetime.now().strftime('%Y%m%d%H%M%S')\n        password_string = self.business_short_code + self.passkey + timestamp\n        password = base64.b64encode(password_string.encode()).decode('utf-8')\n        \n        payload = {\n            \"BusinessShortCode\": self.business_short_code,\n            \"Password\": password,\n            \"Timestamp\": timestamp,\n            \"CheckoutRequestID\": checkout_request_id\n        }\n        \n        try:\n            response = requests.post(url, json=payload, headers=headers, timeout=30)\n            result = response.json()\n            \n            return {\n                \"success\": True,\n                \"result_code\": result.get('ResultCode'),\n                \"result_desc\": result.get('ResultDesc'),\n                \"data\": result\n            }\n            \n        except requests.exceptions.RequestException as e:\n            return {\"success\": False, \"error\": f\"Network error: {str(e)}\"}\n\ndef initiate_deposit(phone_number, amount_ksh, user_id, description=\"Stock Tracker Hub Deposit\"):\n    \"\"\"Initiate M-Pesa deposit\"\"\"\n    client = MpesaClient()\n    \n    # For demo purposes, use a placeholder callback URL\n    callback_url = \"https://your-app.com/mpesa/callback\"\n    account_reference = f\"USER{user_id}\"\n    \n    result = client.stk_push(\n        phone_number=phone_number,\n        amount=amount_ksh,\n        account_reference=account_reference,\n        transaction_desc=description,\n        callback_url=callback_url\n    )\n    \n    return result\n\ndef process_deposit_callback(callback_data):\n    \"\"\"Process M-Pesa callback (would be called by M-Pesa servers)\"\"\"\n    # This would typically be handled by a webhook endpoint\n    # For demo purposes, we'll simulate successful processing\n    \n    result_code = callback_data.get('Body', {}).get('stkCallback', {}).get('ResultCode')\n    \n    if result_code == 0:  # Success\n        # Extract payment details\n        callback_metadata = callback_data.get('Body', {}).get('stkCallback', {}).get('CallbackMetadata', {}).get('Item', [])\n        \n        payment_details = {}\n        for item in callback_metadata:\n            if item.get('Name') == 'Amount':\n                payment_details['amount'] = item.get('Value')\n            elif item.get('Name') == 'MpesaReceiptNumber':\n                payment_details['receipt'] = item.get('Value')\n            elif item.get('Name') == 'PhoneNumber':\n                payment_details['phone'] = item.get('Value')\n        \n        return {\"success\": True, \"details\": payment_details}\n    \n    return {\"success\": False, \"error\": \"Payment failed\"}\n","size_bytes":7445},"pyproject.toml":{"content":"[project]\nname = \"repl-nix-workspace\"\nversion = \"0.1.0\"\ndescription = \"Add your description here\"\nrequires-python = \">=3.11\"\ndependencies = [\n    \"bcrypt>=4.3.0\",\n    \"nsetools>=2.0.1\",\n    \"pandas>=2.3.2\",\n    \"plotly>=6.3.0\",\n    \"requests>=2.32.5\",\n    \"streamlit>=1.49.1\",\n    \"trafilatura>=2.0.0\",\n    \"yfinance>=0.2.65\",\n]\n","size_bytes":329},"replit.md":{"content":"# Stock Tracker Hub\n\n## Overview\n\nStock Tracker Hub is a comprehensive stock market tracking platform built with Streamlit that focuses on NSE (National Stock Exchange) stocks with integrated M-Pesa payment functionality. The application provides real-time stock tracking, portfolio management, and a tiered membership system with varying feature access levels. Users can track their favorite stocks, manage virtual portfolios, and conduct financial transactions through M-Pesa integration, all within a user-friendly web interface.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: Streamlit-based single-page application with multi-page navigation\n- **UI Structure**: Page-based architecture with separate modules for dashboard, portfolio, wallet, and admin functionality\n- **State Management**: Streamlit session state for user authentication and session persistence\n- **Data Visualization**: Plotly integration for interactive charts and financial data visualization\n\n### Backend Architecture\n- **Application Framework**: Python-based backend using Streamlit as the web framework\n- **Database Layer**: SQLite database with direct SQL queries for data persistence\n- **Authentication System**: Custom authentication module with bcrypt password hashing\n- **API Integration**: Yahoo Finance (yfinance) for real-time stock data and NSE tools for Indian market data\n\n### Data Storage Solutions\n- **Primary Database**: SQLite with the following core tables:\n  - `users`: User accounts, tiers, and wallet balances\n  - `transactions`: Financial transaction records\n  - `watchlists`: User stock tracking preferences\n  - `portfolio`: User stock holdings and investments\n- **Caching Strategy**: Streamlit's built-in caching (@st.cache_data) for stock data with 60-second TTL\n- **File Storage**: Local file system for database storage\n\n### Authentication and Authorization\n- **Password Security**: bcrypt hashing for secure password storage\n- **Session Management**: Streamlit session state for maintaining user login status\n- **User Roles**: Two-tier system with regular users and admin privileges\n- **Input Validation**: Custom validation for email, username, and phone number formats\n\n### External Dependencies\n\n- **Stock Data Provider**: Yahoo Finance API via yfinance library for real-time NSE stock prices and historical data\n- **Payment Gateway**: M-Pesa Daraja API integration for Kenyan mobile money transactions\n- **Market Data**: NSE tools for additional Indian stock market functionality\n- **Visualization**: Plotly for interactive financial charts and data visualization\n- **Security**: bcrypt for password hashing and requests library for external API calls\n\nThe system supports a freemium model with three tiers (Free, Silver, Gold) where higher tiers unlock additional features like portfolio management and advanced stock tracking capabilities.","size_bytes":2950},"stock_data.py":{"content":"import yfinance as yf\nimport pandas as pd\nfrom nsetools import Nse\nimport plotly.graph_objects as go\nimport plotly.express as px\nfrom datetime import datetime, timedelta\nimport streamlit as st\n\n# Initialize NSE tools\nnse = Nse()\n\n# Popular NSE stocks mapping (Yahoo Finance symbols)\nNSE_STOCKS = {\n    'RELIANCE.NS': 'Reliance Industries',\n    'TCS.NS': 'Tata Consultancy Services',\n    'INFY.NS': 'Infosys',\n    'HDFC.NS': 'HDFC Ltd',\n    'ICICIBANK.NS': 'ICICI Bank',\n    'HDFCBANK.NS': 'HDFC Bank',\n    'SBIN.NS': 'State Bank of India',\n    'BHARTIARTL.NS': 'Bharti Airtel',\n    'ITC.NS': 'ITC Ltd',\n    'KOTAKBANK.NS': 'Kotak Mahindra Bank',\n    'LT.NS': 'Larsen & Toubro',\n    'AXISBANK.NS': 'Axis Bank',\n    'MARUTI.NS': 'Maruti Suzuki',\n    'SUNPHARMA.NS': 'Sun Pharmaceutical',\n    'TITAN.NS': 'Titan Company',\n    'WIPRO.NS': 'Wipro',\n    'NESTLEIND.NS': 'Nestle India',\n    'HCLTECH.NS': 'HCL Technologies',\n    'BAJFINANCE.NS': 'Bajaj Finance',\n    'ULTRACEMCO.NS': 'UltraTech Cement'\n}\n\n@st.cache_data(ttl=60)  # Cache for 1 minute\ndef get_stock_quote(symbol):\n    \"\"\"Get current stock quote using yfinance\"\"\"\n    try:\n        # First try yfinance for more reliable data\n        stock = yf.Ticker(symbol)\n        info = stock.info\n        hist = stock.history(period=\"1d\")\n        \n        if not hist.empty:\n            current_price = hist['Close'].iloc[-1]\n            open_price = hist['Open'].iloc[-1]\n            high_price = hist['High'].iloc[-1]\n            low_price = hist['Low'].iloc[-1]\n            volume = hist['Volume'].iloc[-1]\n            \n            change = current_price - open_price\n            change_percent = (change / open_price) * 100 if open_price > 0 else 0\n            \n            return {\n                'symbol': symbol,\n                'name': NSE_STOCKS.get(symbol, symbol.replace('.NS', '')),\n                'current_price': float(current_price),\n                'open': float(open_price),\n                'high': float(high_price),\n                'low': float(low_price),\n                'volume': int(volume),\n                'change': float(change),\n                'change_percent': float(change_percent),\n                'last_updated': datetime.now().strftime('%Y-%m-%d %H:%M:%S')\n            }\n    except Exception as e:\n        st.error(f\"Error fetching data for {symbol}: {str(e)}\")\n        return None\n\n@st.cache_data(ttl=300)  # Cache for 5 minutes\ndef get_historical_data(symbol, period=\"1y\"):\n    \"\"\"Get historical stock data\"\"\"\n    try:\n        stock = yf.Ticker(symbol)\n        hist = stock.history(period=period)\n        \n        if hist.empty:\n            return None\n            \n        return hist.reset_index()\n    except Exception as e:\n        st.error(f\"Error fetching historical data for {symbol}: {str(e)}\")\n        return None\n\ndef create_price_chart(symbol, period=\"1y\"):\n    \"\"\"Create interactive price chart using Plotly\"\"\"\n    hist_data = get_historical_data(symbol, period)\n    \n    if hist_data is None:\n        return None\n    \n    # Create candlestick chart\n    fig = go.Figure()\n    \n    fig.add_trace(go.Candlestick(\n        x=hist_data['Date'],\n        open=hist_data['Open'],\n        high=hist_data['High'],\n        low=hist_data['Low'],\n        close=hist_data['Close'],\n        name=symbol\n    ))\n    \n    fig.update_layout(\n        title=f\"{NSE_STOCKS.get(symbol, symbol)} - Price Chart\",\n        yaxis_title=\"Price (₹)\",\n        xaxis_title=\"Date\",\n        template=\"plotly_dark\",\n        height=500\n    )\n    \n    return fig\n\ndef create_volume_chart(symbol, period=\"1y\"):\n    \"\"\"Create volume chart\"\"\"\n    hist_data = get_historical_data(symbol, period)\n    \n    if hist_data is None:\n        return None\n    \n    fig = px.bar(\n        hist_data,\n        x='Date',\n        y='Volume',\n        title=f\"{NSE_STOCKS.get(symbol, symbol)} - Trading Volume\",\n        template=\"plotly_dark\",\n        height=300\n    )\n    \n    return fig\n\ndef get_market_indices():\n    \"\"\"Get major market indices\"\"\"\n    indices = {\n        '^NSEI': 'NIFTY 50',\n        '^NSEBANK': 'NIFTY Bank',\n        '^NSEIT': 'NIFTY IT'\n    }\n    \n    index_data = {}\n    \n    for symbol, name in indices.items():\n        try:\n            index = yf.Ticker(symbol)\n            hist = index.history(period=\"1d\")\n            \n            if not hist.empty:\n                current = hist['Close'].iloc[-1]\n                open_price = hist['Open'].iloc[-1]\n                change = current - open_price\n                change_percent = (change / open_price) * 100 if open_price > 0 else 0\n                \n                index_data[name] = {\n                    'current': float(current),\n                    'change': float(change),\n                    'change_percent': float(change_percent)\n                }\n        except Exception as e:\n            st.error(f\"Error fetching index data for {name}: {str(e)}\")\n    \n    return index_data\n\ndef search_stocks(query):\n    \"\"\"Search for stocks by name or symbol\"\"\"\n    query = query.upper()\n    results = []\n    \n    for symbol, name in NSE_STOCKS.items():\n        if query in symbol.upper() or query in name.upper():\n            results.append({'symbol': symbol, 'name': name})\n    \n    return results[:10]  # Return top 10 results\n\ndef convert_inr_to_usd(inr_amount, exchange_rate=83.0):\n    \"\"\"Convert INR to USD (approximate rate)\"\"\"\n    return inr_amount / exchange_rate\n\ndef convert_usd_to_inr(usd_amount, exchange_rate=83.0):\n    \"\"\"Convert USD to INR (approximate rate)\"\"\"\n    return usd_amount * exchange_rate\n","size_bytes":5528},"utils.py":{"content":"import sqlite3\nfrom datetime import datetime, timedelta\nimport hashlib\nimport secrets\nimport streamlit as st\n\ndef validate_phone_number(phone_number):\n    \"\"\"Validate Kenyan phone number format\"\"\"\n    # Remove any spaces or special characters\n    phone = phone_number.replace(\" \", \"\").replace(\"-\", \"\").replace(\"+\", \"\")\n    \n    # Check if it's a valid Kenyan number\n    if phone.startswith(\"0\"):\n        phone = \"254\" + phone[1:]\n    elif not phone.startswith(\"254\"):\n        return False, \"Phone number must be a valid Kenyan number (254XXXXXXXXX)\"\n    \n    if len(phone) != 12:\n        return False, \"Phone number must be 12 digits (254XXXXXXXXX)\"\n    \n    if not phone.isdigit():\n        return False, \"Phone number must contain only digits\"\n    \n    return True, phone\n\ndef generate_reference_id():\n    \"\"\"Generate a unique reference ID for transactions\"\"\"\n    return f\"STH{int(datetime.now().timestamp())}{secrets.randbelow(9999):04d}\"\n\ndef format_currency(amount, currency=\"USD\"):\n    \"\"\"Format currency with appropriate symbol\"\"\"\n    if currency == \"USD\":\n        return f\"${amount:,.2f}\"\n    elif currency == \"KSh\":\n        return f\"KSh {amount:,.0f}\"\n    else:\n        return f\"{amount:,.2f} {currency}\"\n\ndef calculate_portfolio_metrics(portfolio_data):\n    \"\"\"Calculate portfolio performance metrics\"\"\"\n    if not portfolio_data:\n        return {\n            'total_value': 0,\n            'total_investment': 0,\n            'total_pnl': 0,\n            'total_pnl_percent': 0,\n            'best_performer': None,\n            'worst_performer': None\n        }\n    \n    total_value = sum(item['current_value_inr'] for item in portfolio_data)\n    total_investment = sum(item['investment'] for item in portfolio_data)\n    total_pnl = total_value - total_investment\n    total_pnl_percent = (total_pnl / total_investment * 100) if total_investment > 0 else 0\n    \n    # Find best and worst performers\n    best_performer = max(portfolio_data, key=lambda x: x['pnl_percent'])\n    worst_performer = min(portfolio_data, key=lambda x: x['pnl_percent'])\n    \n    return {\n        'total_value': total_value,\n        'total_investment': total_investment,\n        'total_pnl': total_pnl,\n        'total_pnl_percent': total_pnl_percent,\n        'best_performer': best_performer,\n        'worst_performer': worst_performer\n    }\n\ndef log_user_activity(user_id, activity_type, details=None):\n    \"\"\"Log user activity for analytics\"\"\"\n    conn = sqlite3.connect('stock_tracker.db')\n    cursor = conn.cursor()\n    \n    # Create activity log table if it doesn't exist\n    cursor.execute(\"\"\"\n        CREATE TABLE IF NOT EXISTS activity_log (\n            id INTEGER PRIMARY KEY AUTOINCREMENT,\n            user_id INTEGER NOT NULL,\n            activity_type TEXT NOT NULL,\n            details TEXT,\n            timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n            FOREIGN KEY (user_id) REFERENCES users (id)\n        )\n    \"\"\")\n    \n    cursor.execute(\n        \"INSERT INTO activity_log (user_id, activity_type, details) VALUES (?, ?, ?)\",\n        (user_id, activity_type, details)\n    )\n    \n    conn.commit()\n    conn.close()\n\ndef get_exchange_rate():\n    \"\"\"Get current USD to KSh exchange rate (simplified)\"\"\"\n    # In a real application, this would fetch from a currency API\n    # For now, return a fixed rate\n    return 130.0\n\ndef sanitize_input(text):\n    \"\"\"Sanitize user input to prevent XSS\"\"\"\n    if not text:\n        return text\n    \n    # Basic HTML escape\n    text = text.replace(\"&\", \"&amp;\")\n    text = text.replace(\"<\", \"&lt;\")\n    text = text.replace(\">\", \"&gt;\")\n    text = text.replace('\"', \"&quot;\")\n    text = text.replace(\"'\", \"&#x27;\")\n    \n    return text\n\ndef check_rate_limit(user_id, action, limit=5, window_minutes=60):\n    \"\"\"Simple rate limiting check\"\"\"\n    conn = sqlite3.connect('stock_tracker.db')\n    cursor = conn.cursor()\n    \n    # Create rate limit table if it doesn't exist\n    cursor.execute(\"\"\"\n        CREATE TABLE IF NOT EXISTS rate_limits (\n            id INTEGER PRIMARY KEY AUTOINCREMENT,\n            user_id INTEGER NOT NULL,\n            action TEXT NOT NULL,\n            timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n            FOREIGN KEY (user_id) REFERENCES users (id)\n        )\n    \"\"\")\n    \n    # Check recent attempts\n    cutoff_time = datetime.now() - timedelta(minutes=window_minutes)\n    cursor.execute(\n        \"\"\"SELECT COUNT(*) FROM rate_limits \n           WHERE user_id = ? AND action = ? AND timestamp > ?\"\"\",\n        (user_id, action, cutoff_time)\n    )\n    \n    recent_attempts = cursor.fetchone()[0]\n    \n    if recent_attempts >= limit:\n        conn.close()\n        return False, f\"Rate limit exceeded. Try again in {window_minutes} minutes.\"\n    \n    # Log this attempt\n    cursor.execute(\n        \"INSERT INTO rate_limits (user_id, action) VALUES (?, ?)\",\n        (user_id, action)\n    )\n    \n    conn.commit()\n    conn.close()\n    \n    return True, \"OK\"\n\ndef cleanup_old_data():\n    \"\"\"Cleanup old data to maintain database performance\"\"\"\n    conn = sqlite3.connect('stock_tracker.db')\n    cursor = conn.cursor()\n    \n    # Clean old activity logs (keep last 90 days)\n    cursor.execute(\n        \"DELETE FROM activity_log WHERE timestamp < datetime('now', '-90 days')\"\n    )\n    \n    # Clean old rate limit entries (keep last 24 hours)\n    cursor.execute(\n        \"DELETE FROM rate_limits WHERE timestamp < datetime('now', '-1 days')\"\n    )\n    \n    conn.commit()\n    conn.close()\n\ndef send_notification(user_id, title, message, notification_type=\"info\"):\n    \"\"\"Store in-app notification\"\"\"\n    conn = sqlite3.connect('stock_tracker.db')\n    cursor = conn.cursor()\n    \n    # Create notifications table if it doesn't exist\n    cursor.execute(\"\"\"\n        CREATE TABLE IF NOT EXISTS notifications (\n            id INTEGER PRIMARY KEY AUTOINCREMENT,\n            user_id INTEGER NOT NULL,\n            title TEXT NOT NULL,\n            message TEXT NOT NULL,\n            notification_type TEXT DEFAULT 'info',\n            is_read BOOLEAN DEFAULT FALSE,\n            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n            FOREIGN KEY (user_id) REFERENCES users (id)\n        )\n    \"\"\")\n    \n    cursor.execute(\n        \"\"\"INSERT INTO notifications (user_id, title, message, notification_type) \n           VALUES (?, ?, ?, ?)\"\"\",\n        (user_id, title, message, notification_type)\n    )\n    \n    conn.commit()\n    conn.close()\n\ndef get_user_notifications(user_id, limit=10):\n    \"\"\"Get user notifications\"\"\"\n    conn = sqlite3.connect('stock_tracker.db')\n    cursor = conn.cursor()\n    \n    cursor.execute(\n        \"\"\"SELECT title, message, notification_type, is_read, created_at \n           FROM notifications \n           WHERE user_id = ? \n           ORDER BY created_at DESC \n           LIMIT ?\"\"\",\n        (user_id, limit)\n    )\n    \n    notifications = cursor.fetchall()\n    conn.close()\n    \n    return notifications\n\ndef hash_api_key(api_key):\n    \"\"\"Hash API key for secure storage\"\"\"\n    return hashlib.sha256(api_key.encode()).hexdigest()\n\n@st.cache_data(ttl=300)  # Cache for 5 minutes\ndef get_market_status():\n    \"\"\"Get market status (open/closed)\"\"\"\n    now = datetime.now()\n    \n    # NSE trading hours: 9:00 AM to 3:30 PM IST, Monday to Friday\n    # This is a simplified check\n    if now.weekday() >= 5:  # Weekend\n        return {\"status\": \"closed\", \"reason\": \"Weekend\"}\n    \n    hour = now.hour\n    if hour < 9 or hour >= 15:\n        return {\"status\": \"closed\", \"reason\": \"Outside trading hours\"}\n    \n    return {\"status\": \"open\", \"next_open\": None}\n\ndef create_backup():\n    \"\"\"Create database backup\"\"\"\n    import shutil\n    backup_filename = f\"stock_tracker_backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}.db\"\n    shutil.copy2('stock_tracker.db', backup_filename)\n    return backup_filename\n","size_bytes":7777},"pages/admin.py":{"content":"import streamlit as st\nimport sqlite3\nimport pandas as pd\nfrom datetime import datetime, timedelta\nimport plotly.express as px\nimport plotly.graph_objects as go\n\ndef show():\n    if not st.session_state.is_admin:\n        st.error(\"Access denied. Admin privileges required.\")\n        return\n    \n    st.title(\"🔧 Admin Panel\")\n    \n    # Admin navigation tabs\n    tab1, tab2, tab3, tab4, tab5 = st.tabs([\n        \"User Management\", \n        \"Transaction Management\", \n        \"System Stats\", \n        \"Tier Management\",\n        \"Database Operations\"\n    ])\n    \n    with tab1:\n        show_user_management()\n    \n    with tab2:\n        show_transaction_management()\n    \n    with tab3:\n        show_system_stats()\n    \n    with tab4:\n        show_tier_management()\n    \n    with tab5:\n        show_database_operations()\n\ndef show_user_management():\n    \"\"\"User management interface\"\"\"\n    st.subheader(\"👥 User Management\")\n    \n    conn = sqlite3.connect('stock_tracker.db')\n    cursor = conn.cursor()\n    \n    # Get all users\n    cursor.execute(\"\"\"\n        SELECT id, username, email, tier, balance_usd, created_at\n        FROM users\n        ORDER BY created_at DESC\n    \"\"\")\n    \n    users = cursor.fetchall()\n    \n    if users:\n        # Convert to DataFrame for display\n        df = pd.DataFrame(users)\n        df.columns = ['ID', 'Username', 'Email', 'Tier', 'Balance (USD)', 'Created At']\n        \n        st.dataframe(df, use_container_width=True)\n        \n        # User statistics\n        col1, col2, col3, col4 = st.columns(4)\n        with col1:\n            st.metric(\"Total Users\", len(users))\n        with col2:\n            free_users = len([u for u in users if u[3] == 'Free'])\n            st.metric(\"Free Users\", free_users)\n        with col3:\n            paid_users = len([u for u in users if u[3] != 'Free'])\n            st.metric(\"Paid Users\", paid_users)\n        with col4:\n            total_balance = sum(u[4] for u in users)\n            st.metric(\"Total Balance\", f\"${total_balance:,.2f}\")\n        \n        # User tier distribution\n        tier_counts = {}\n        for user in users:\n            tier = user[3]\n            tier_counts[tier] = tier_counts.get(tier, 0) + 1\n        \n        if tier_counts:\n            fig = px.pie(\n                values=list(tier_counts.values()),\n                names=list(tier_counts.keys()),\n                title=\"User Distribution by Tier\"\n            )\n            st.plotly_chart(fig, use_container_width=True)\n    else:\n        st.info(\"No users found\")\n    \n    # User actions\n    st.subheader(\"User Actions\")\n    \n    col1, col2 = st.columns(2)\n    \n    with col1:\n        st.write(\"**Modify User Balance**\")\n        with st.form(\"modify_balance\"):\n            user_id = st.number_input(\"User ID\", min_value=1, step=1)\n            new_balance = st.number_input(\"New Balance (USD)\", min_value=0.0, step=0.01)\n            submit_balance = st.form_submit_button(\"Update Balance\")\n            \n            if submit_balance:\n                cursor.execute(\n                    \"UPDATE users SET balance_usd = ? WHERE id = ?\",\n                    (new_balance, user_id)\n                )\n                conn.commit()\n                st.success(f\"Updated balance for user {user_id} to ${new_balance}\")\n                st.rerun()\n    \n    with col2:\n        st.write(\"**Change User Tier**\")\n        with st.form(\"change_tier\"):\n            user_id_tier = st.number_input(\"User ID\", min_value=1, step=1, key=\"tier_user_id\")\n            new_tier = st.selectbox(\"New Tier\", [\"Free\", \"Silver\", \"Gold\", \"Diamond\"])\n            submit_tier = st.form_submit_button(\"Update Tier\")\n            \n            if submit_tier:\n                cursor.execute(\n                    \"UPDATE users SET tier = ? WHERE id = ?\",\n                    (new_tier, user_id_tier)\n                )\n                conn.commit()\n                st.success(f\"Updated tier for user {user_id_tier} to {new_tier}\")\n                st.rerun()\n    \n    conn.close()\n\ndef show_transaction_management():\n    \"\"\"Transaction management interface\"\"\"\n    st.subheader(\"💳 Transaction Management\")\n    \n    conn = sqlite3.connect('stock_tracker.db')\n    cursor = conn.cursor()\n    \n    # Get recent transactions\n    cursor.execute(\"\"\"\n        SELECT t.id, u.username, t.transaction_type, t.amount_usd, \n               t.amount_ksh, t.mpesa_receipt, t.status, t.created_at\n        FROM transactions t\n        JOIN users u ON t.user_id = u.id\n        ORDER BY t.created_at DESC\n        LIMIT 50\n    \"\"\")\n    \n    transactions = cursor.fetchall()\n    \n    if transactions:\n        df = pd.DataFrame(transactions)\n        df.columns = ['ID', 'Username', 'Type', 'Amount (USD)', 'Amount (KSh)', \n            'M-Pesa Receipt', 'Status', 'Created At']\n        \n        st.dataframe(df, use_container_width=True)\n        \n        # Transaction statistics\n        col1, col2, col3, col4 = st.columns(4)\n        with col1:\n            total_transactions = len(transactions)\n            st.metric(\"Total Transactions\", total_transactions)\n        with col2:\n            pending_count = len([t for t in transactions if t[6] == 'pending'])\n            st.metric(\"Pending\", pending_count)\n        with col3:\n            completed_count = len([t for t in transactions if t[6] == 'completed'])\n            st.metric(\"Completed\", completed_count)\n        with col4:\n            total_volume = sum(abs(t[3]) for t in transactions if t[6] == 'completed')\n            st.metric(\"Total Volume\", f\"${total_volume:,.2f}\")\n    else:\n        st.info(\"No transactions found\")\n    \n    # Approve pending transactions\n    st.subheader(\"Pending Approvals\")\n    \n    cursor.execute(\"\"\"\n        SELECT t.id, u.username, t.transaction_type, t.amount_usd, t.amount_ksh\n        FROM transactions t\n        JOIN users u ON t.user_id = u.id\n        WHERE t.status = 'pending'\n        ORDER BY t.created_at ASC\n    \"\"\")\n    \n    pending_transactions = cursor.fetchall()\n    \n    if pending_transactions:\n        for trans in pending_transactions:\n            trans_id, username, trans_type, amount_usd, amount_ksh = trans\n            \n            col1, col2, col3 = st.columns([2, 1, 1])\n            with col1:\n                st.write(f\"**{username}** - {trans_type} - ${amount_usd:.2f}\")\n            with col2:\n                if st.button(\"Approve\", key=f\"approve_{trans_id}\"):\n                    approve_transaction(trans_id)\n                    st.rerun()\n            with col3:\n                if st.button(\"Reject\", key=f\"reject_{trans_id}\"):\n                    reject_transaction(trans_id)\n                    st.rerun()\n    else:\n        st.info(\"No pending transactions\")\n    \n    conn.close()\n\ndef approve_transaction(trans_id):\n    \"\"\"Approve a pending transaction\"\"\"\n    conn = sqlite3.connect('stock_tracker.db')\n    cursor = conn.cursor()\n    \n    # Get transaction details\n    cursor.execute(\n        \"SELECT user_id, transaction_type, amount_usd FROM transactions WHERE id = ?\",\n        (trans_id,)\n    )\n    transaction = cursor.fetchone()\n    \n    if transaction:\n        user_id, trans_type, amount_usd = transaction\n        \n        # Update transaction status\n        cursor.execute(\n            \"UPDATE transactions SET status = 'completed' WHERE id = ?\",\n            (trans_id,)\n        )\n        \n        # Handle different transaction types\n        if trans_type.startswith('deposit'):\n            # Add to user balance\n            cursor.execute(\n                \"UPDATE users SET balance_usd = balance_usd + ? WHERE id = ?\",\n                (amount_usd, user_id)\n            )\n        elif trans_type.startswith('upgrade_'):\n            # Upgrade user tier\n            target_tier = trans_type.split('_')[1]\n            cursor.execute(\n                \"UPDATE users SET tier = ? WHERE id = ?\",\n                (target_tier, user_id)\n            )\n        \n        conn.commit()\n        st.success(f\"Transaction {trans_id} approved\")\n    \n    conn.close()\n\ndef reject_transaction(trans_id):\n    \"\"\"Reject a pending transaction\"\"\"\n    conn = sqlite3.connect('stock_tracker.db')\n    cursor = conn.cursor()\n    \n    cursor.execute(\n        \"UPDATE transactions SET status = 'rejected' WHERE id = ?\",\n        (trans_id,)\n    )\n    conn.commit()\n    conn.close()\n    \n    st.success(f\"Transaction {trans_id} rejected\")\n\ndef show_system_stats():\n    \"\"\"System statistics dashboard\"\"\"\n    st.subheader(\"📊 System Statistics\")\n    \n    conn = sqlite3.connect('stock_tracker.db')\n    cursor = conn.cursor()\n    \n    # User registration over time\n    cursor.execute(\"\"\"\n        SELECT DATE(created_at) as date, COUNT(*) as registrations\n        FROM users\n        WHERE created_at >= datetime('now', '-30 days')\n        GROUP BY DATE(created_at)\n        ORDER BY date\n    \"\"\")\n    \n    registration_data = cursor.fetchall()\n    \n    if registration_data:\n        df_reg = pd.DataFrame(registration_data)\n        df_reg.columns = ['Date', 'Registrations']\n        \n        fig = px.line(\n            df_reg,\n            x='Date',\n            y='Registrations',\n            title=\"User Registrations (Last 30 Days)\"\n        )\n        st.plotly_chart(fig, use_container_width=True)\n    \n    # Transaction volume over time\n    cursor.execute(\"\"\"\n        SELECT DATE(created_at) as date, SUM(ABS(amount_usd)) as volume\n        FROM transactions\n        WHERE created_at >= datetime('now', '-30 days') AND status = 'completed'\n        GROUP BY DATE(created_at)\n        ORDER BY date\n    \"\"\")\n    \n    volume_data = cursor.fetchall()\n    \n    if volume_data:\n        df_vol = pd.DataFrame(volume_data)\n        df_vol.columns = ['Date', 'Volume']\n        \n        fig = px.bar(\n            df_vol,\n            x='Date',\n            y='Volume',\n            title=\"Transaction Volume (Last 30 Days)\"\n        )\n        st.plotly_chart(fig, use_container_width=True)\n    \n    # Portfolio statistics\n    cursor.execute(\"\"\"\n        SELECT COUNT(DISTINCT user_id) as active_traders,\n               COUNT(DISTINCT stock_symbol) as unique_stocks,\n               SUM(quantity * purchase_price) as total_invested\n        FROM portfolio\n        WHERE quantity > 0\n    \"\"\")\n    \n    portfolio_stats = cursor.fetchone()\n    \n    if portfolio_stats:\n        col1, col2, col3 = st.columns(3)\n        with col1:\n            st.metric(\"Active Traders\", portfolio_stats[0] or 0)\n        with col2:\n            st.metric(\"Unique Stocks Traded\", portfolio_stats[1] or 0)\n        with col3:\n            st.metric(\"Total Invested\", f\"₹{portfolio_stats[2] or 0:,.2f}\")\n    \n    conn.close()\n\ndef show_tier_management():\n    \"\"\"Tier management interface\"\"\"\n    st.subheader(\"💎 Tier Management\")\n    \n    from database import get_user_tier_limits\n    \n    # Display tier configurations\n    tiers = ['Free', 'Silver', 'Gold', 'Diamond']\n    \n    for tier in tiers:\n        limits = get_user_tier_limits(tier)\n        \n        with st.expander(f\"{tier} Tier Configuration\"):\n            col1, col2 = st.columns(2)\n            with col1:\n                st.write(f\"**Price:** ${limits['price']} USD\")\n                st.write(f\"**Watchlist Limit:** {limits['watchlist_limit']} stocks\")\n                st.write(f\"**Portfolio Limit:** {limits['portfolio_limit']} stocks\")\n            with col2:\n                st.write(f\"**Alerts Limit:** {limits['alerts_limit']} alerts\")\n                st.write(f\"**Real-time Data:** {'Yes' if limits['real_time_data'] else 'No'}\")\n    \n    # Bulk tier operations\n    st.subheader(\"Bulk Operations\")\n    \n    with st.form(\"bulk_tier_update\"):\n        st.write(\"**Bulk Tier Update**\")\n        from_tier = st.selectbox(\"From Tier\", tiers, key=\"bulk_from\")\n        to_tier = st.selectbox(\"To Tier\", tiers, key=\"bulk_to\")\n        \n        if st.form_submit_button(\"Apply Bulk Update\"):\n            conn = sqlite3.connect('stock_tracker.db')\n            cursor = conn.cursor()\n            \n            cursor.execute(\n                \"UPDATE users SET tier = ? WHERE tier = ?\",\n                (to_tier, from_tier)\n            )\n            \n            affected_rows = cursor.rowcount\n            conn.commit()\n            conn.close()\n            \n            st.success(f\"Updated {affected_rows} users from {from_tier} to {to_tier}\")\n\ndef show_database_operations():\n    \"\"\"Database operations interface\"\"\"\n    st.subheader(\"🗃️ Database Operations\")\n    \n    st.warning(\"⚠️ These operations can affect system data. Use with caution!\")\n    \n    col1, col2 = st.columns(2)\n    \n    with col1:\n        st.write(\"**Database Statistics**\")\n        \n        conn = sqlite3.connect('stock_tracker.db')\n        cursor = conn.cursor()\n        \n        # Get table row counts\n        tables = ['users', 'transactions', 'watchlists', 'portfolio', 'alerts']\n        \n        for table in tables:\n            cursor.execute(f\"SELECT COUNT(*) FROM {table}\")\n            count = cursor.fetchone()[0]\n            st.metric(f\"{table.title()} Records\", count)\n        \n        conn.close()\n    \n    with col2:\n        st.write(\"**Maintenance Operations**\")\n        \n        if st.button(\"Clean Old Transactions\", type=\"secondary\"):\n            clean_old_transactions()\n        \n        if st.button(\"Reset Demo Data\", type=\"secondary\"):\n            reset_demo_data()\n        \n        if st.button(\"Generate Test Users\", type=\"secondary\"):\n            generate_test_users()\n\ndef clean_old_transactions():\n    \"\"\"Clean transactions older than 90 days\"\"\"\n    conn = sqlite3.connect('stock_tracker.db')\n    cursor = conn.cursor()\n    \n    cursor.execute(\"\"\"\n        DELETE FROM transactions \n        WHERE created_at < datetime('now', '-90 days') \n        AND status IN ('completed', 'rejected')\n    \"\"\")\n    \n    deleted_count = cursor.rowcount\n    conn.commit()\n    conn.close()\n    \n    st.success(f\"Cleaned {deleted_count} old transaction records\")\n\ndef reset_demo_data():\n    \"\"\"Reset demo data (keep admin user)\"\"\"\n    conn = sqlite3.connect('stock_tracker.db')\n    cursor = conn.cursor()\n    \n    # Delete all data except admin\n    cursor.execute(\"DELETE FROM transactions WHERE user_id != 1\")\n    cursor.execute(\"DELETE FROM watchlists WHERE user_id != 1\")\n    cursor.execute(\"DELETE FROM portfolio WHERE user_id != 1\")\n    cursor.execute(\"DELETE FROM alerts WHERE user_id != 1\")\n    cursor.execute(\"DELETE FROM users WHERE id != 1\")\n    \n    conn.commit()\n    conn.close()\n    \n    st.success(\"Demo data reset completed\")\n\ndef generate_test_users():\n    \"\"\"Generate test users for demo\"\"\"\n    conn = sqlite3.connect('stock_tracker.db')\n    cursor = conn.cursor()\n    \n    from auth import hash_password\n    import random\n    \n    test_users = [\n        ('john@test.com', 'john_doe', 'password123', 'Silver', 100.0),\n        ('jane@test.com', 'jane_smith', 'password123', 'Gold', 250.0),\n        ('bob@test.com', 'bob_wilson', 'password123', 'Free', 0.0),\n    ]\n    \n    for email, username, password, tier, balance in test_users:\n        try:\n            password_hash = hash_password(password)\n            cursor.execute(\n                \"\"\"INSERT INTO users (email, username, password_hash, tier, balance_usd) \n                   VALUES (?, ?, ?, ?, ?)\"\"\",\n                (email, username, password_hash, tier, balance)\n            )\n        except sqlite3.IntegrityError:\n            pass  # User already exists\n    \n    conn.commit()\n    conn.close()\n    \n    st.success(\"Test users generated\")\n\n# Make the page self-executing when accessed via Streamlit's multipage system\nif __name__ == \"__main__\":\n    show()\n","size_bytes":15522},"pages/dashboard.py":{"content":"import streamlit as st\nimport sqlite3\nfrom stock_data import get_stock_quote, NSE_STOCKS, get_market_indices, create_price_chart, search_stocks\nfrom database import get_user_tier_limits\nimport plotly.graph_objects as go\nfrom datetime import datetime\n\ndef show():\n    st.title(\"📈 Stock Market Dashboard\")\n    \n    # Get user info\n    conn = sqlite3.connect('stock_tracker.db')\n    cursor = conn.cursor()\n    cursor.execute(\"SELECT tier, balance_usd FROM users WHERE id = ?\", (st.session_state.user_id,))\n    user_info = cursor.fetchone()\n    \n    if not user_info:\n        st.error(\"User not found\")\n        return\n    \n    tier, balance = user_info\n    tier_limits = get_user_tier_limits(tier)\n    \n    # Display user info and tier benefits\n    col1, col2, col3, col4 = st.columns(4)\n    with col1:\n        st.metric(\"Current Tier\", tier)\n    with col2:\n        st.metric(\"Wallet Balance\", f\"${balance:.2f}\")\n    with col3:\n        st.metric(\"Watchlist Limit\", f\"{tier_limits['watchlist_limit']}\")\n    with col4:\n        st.metric(\"Portfolio Limit\", f\"{tier_limits['portfolio_limit']}\")\n    \n    # Market Indices\n    st.subheader(\"📊 Market Indices\")\n    indices = get_market_indices()\n    \n    if indices:\n        idx_cols = st.columns(len(indices))\n        for idx, (name, data) in enumerate(indices.items()):\n            with idx_cols[idx]:\n                delta_color = \"normal\" if data['change'] >= 0 else \"inverse\"\n                st.metric(\n                    name,\n                    f\"{data['current']:.2f}\",\n                    f\"{data['change']:+.2f} ({data['change_percent']:+.2f}%)\",\n                    delta_color=delta_color\n                )\n    \n    # Stock Search and Watchlist Management\n    st.subheader(\"🔍 Stock Search\")\n    \n    col1, col2 = st.columns([3, 1])\n    with col1:\n        search_query = st.text_input(\"Search for stocks\", placeholder=\"Enter stock name or symbol\")\n    with col2:\n        st.write(\"\")  # Spacing\n        search_button = st.button(\"Search\")\n    \n    if search_query or search_button:\n        results = search_stocks(search_query) if search_query else []\n        if results:\n            st.write(\"Search Results:\")\n            for result in results:\n                col1, col2, col3 = st.columns([2, 2, 1])\n                with col1:\n                    st.write(f\"**{result['name']}**\")\n                with col2:\n                    st.write(f\"`{result['symbol']}`\")\n                with col3:\n                    if st.button(\"Add to Watchlist\", key=f\"add_{result['symbol']}\"):\n                        add_to_watchlist(result['symbol'])\n    \n    # Current Watchlist\n    st.subheader(\"⭐ Your Watchlist\")\n    \n    cursor.execute(\"SELECT stock_symbol FROM watchlists WHERE user_id = ?\", (st.session_state.user_id,))\n    watchlist_symbols = [row[0] for row in cursor.fetchall()]\n    \n    if not watchlist_symbols:\n        st.info(\"Your watchlist is empty. Search for stocks above to add them.\")\n    else:\n        # Display watchlist stocks\n        for symbol in watchlist_symbols:\n            with st.container():\n                quote = get_stock_quote(symbol)\n                if quote:\n                    col1, col2, col3, col4, col5, col6 = st.columns([2, 1, 1, 1, 1, 1])\n                    \n                    with col1:\n                        st.write(f\"**{quote['name']}** ({symbol})\")\n                    with col2:\n                        st.metric(\"Price\", f\"₹{quote['current_price']:.2f}\")\n                    with col3:\n                        delta_color = \"normal\" if quote['change'] >= 0 else \"inverse\"\n                        st.metric(\"Change\", f\"₹{quote['change']:.2f}\", delta_color=delta_color)\n                    with col4:\n                        st.metric(\"Change %\", f\"{quote['change_percent']:.2f}%\")\n                    with col5:\n                        if st.button(\"📈 Chart\", key=f\"chart_{symbol}\"):\n                            show_stock_chart(symbol)\n                    with col6:\n                        if st.button(\"❌ Remove\", key=f\"remove_{symbol}\"):\n                            remove_from_watchlist(symbol)\n                \n                st.divider()\n    \n    # Tier Upgrade Section\n    if tier != 'Diamond':\n        st.subheader(\"💎 Upgrade Your Tier\")\n        \n        next_tiers = {'Free': 'Silver', 'Silver': 'Gold', 'Gold': 'Diamond'}\n        next_tier = next_tiers.get(tier)\n        \n        if next_tier:\n            next_tier_limits = get_user_tier_limits(next_tier)\n            \n            col1, col2 = st.columns(2)\n            with col1:\n                st.info(f\"\"\"\n                **Upgrade to {next_tier}** - ${next_tier_limits['price']} USD\n                \n                Benefits:\n                - Watchlist: {next_tier_limits['watchlist_limit']} stocks\n                - Portfolio: {next_tier_limits['portfolio_limit']} stocks\n                - Alerts: {next_tier_limits['alerts_limit']} alerts\n                - Real-time data: {'Yes' if next_tier_limits['real_time_data'] else 'No'}\n                \"\"\")\n            \n            with col2:\n                if st.button(f\"Upgrade to {next_tier}\", type=\"primary\"):\n                    st.session_state.show_upgrade_modal = True\n                    st.rerun()\n    \n    # Upgrade Modal\n    if getattr(st.session_state, 'show_upgrade_modal', False):\n        show_upgrade_modal(tier)\n    \n    conn.close()\n\ndef add_to_watchlist(symbol):\n    \"\"\"Add stock to user's watchlist\"\"\"\n    conn = sqlite3.connect('stock_tracker.db')\n    cursor = conn.cursor()\n    \n    # Check tier limits\n    cursor.execute(\"SELECT tier FROM users WHERE id = ?\", (st.session_state.user_id,))\n    tier = cursor.fetchone()[0]\n    tier_limits = get_user_tier_limits(tier)\n    \n    # Count current watchlist items\n    cursor.execute(\"SELECT COUNT(*) FROM watchlists WHERE user_id = ?\", (st.session_state.user_id,))\n    current_count = cursor.fetchone()[0]\n    \n    if current_count >= tier_limits['watchlist_limit']:\n        st.error(f\"Watchlist limit reached ({tier_limits['watchlist_limit']} stocks). Upgrade your tier to add more stocks.\")\n        conn.close()\n        return\n    \n    try:\n        cursor.execute(\n            \"INSERT INTO watchlists (user_id, stock_symbol) VALUES (?, ?)\",\n            (st.session_state.user_id, symbol)\n        )\n        conn.commit()\n        st.success(f\"Added {symbol} to your watchlist!\")\n        st.rerun()\n    except sqlite3.IntegrityError:\n        st.warning(f\"{symbol} is already in your watchlist!\")\n    except Exception as e:\n        st.error(f\"Error adding to watchlist: {str(e)}\")\n    \n    conn.close()\n\ndef remove_from_watchlist(symbol):\n    \"\"\"Remove stock from user's watchlist\"\"\"\n    conn = sqlite3.connect('stock_tracker.db')\n    cursor = conn.cursor()\n    \n    cursor.execute(\n        \"DELETE FROM watchlists WHERE user_id = ? AND stock_symbol = ?\",\n        (st.session_state.user_id, symbol)\n    )\n    conn.commit()\n    conn.close()\n    \n    st.success(f\"Removed {symbol} from your watchlist!\")\n    st.rerun()\n\ndef show_stock_chart(symbol):\n    \"\"\"Display stock chart in modal\"\"\"\n    st.subheader(f\"📈 {NSE_STOCKS.get(symbol, symbol)} Chart\")\n    \n    # Time period selector\n    period = st.selectbox(\n        \"Select time period\",\n        [\"1d\", \"5d\", \"1mo\", \"3mo\", \"6mo\", \"1y\", \"2y\"],\n        index=5,  # Default to 1y\n        key=f\"period_{symbol}\"\n    )\n    \n    # Create and display chart\n    chart = create_price_chart(symbol, period)\n    if chart:\n        st.plotly_chart(chart, use_container_width=True)\n    else:\n        st.error(\"Unable to load chart data\")\n\ndef show_upgrade_modal(current_tier):\n    \"\"\"Show tier upgrade modal\"\"\"\n    st.subheader(\"💳 Upgrade Your Membership Tier\")\n    \n    next_tiers = {'Free': 'Silver', 'Silver': 'Gold', 'Gold': 'Diamond'}\n    next_tier = next_tiers.get(current_tier)\n    \n    if next_tier:\n        next_tier_limits = get_user_tier_limits(next_tier)\n        \n        st.info(f\"Upgrading to {next_tier} Tier - ${next_tier_limits['price']} USD\")\n        \n        with st.form(\"upgrade_form\"):\n            st.write(\"**Payment Method: M-Pesa**\")\n            phone_number = st.text_input(\"M-Pesa Phone Number\", placeholder=\"254712345678\")\n            \n            # Calculate KSh amount (USD to KSh conversion at ~130:1)\n            usd_amount = next_tier_limits['price']\n            ksh_amount = usd_amount * 130\n            \n            st.write(f\"Amount to pay: **KSh {ksh_amount:,.0f}** (${usd_amount} USD)\")\n            \n            col1, col2 = st.columns(2)\n            with col1:\n                submit = st.form_submit_button(\"Pay with M-Pesa\", type=\"primary\")\n            with col2:\n                cancel = st.form_submit_button(\"Cancel\")\n            \n            if cancel:\n                st.session_state.show_upgrade_modal = False\n                st.rerun()\n            \n            if submit:\n                if not phone_number:\n                    st.error(\"Please enter your M-Pesa phone number\")\n                else:\n                    # Process M-Pesa payment\n                    process_tier_upgrade_payment(phone_number, ksh_amount, next_tier)\n    \n    if st.button(\"Close\", key=\"close_upgrade_modal\"):\n        st.session_state.show_upgrade_modal = False\n        st.rerun()\n\ndef process_tier_upgrade_payment(phone_number, amount_ksh, target_tier):\n    \"\"\"Process tier upgrade payment via M-Pesa\"\"\"\n    from mpesa_client import initiate_deposit\n    \n    with st.spinner(\"Processing payment...\"):\n        result = initiate_deposit(\n            phone_number=phone_number,\n            amount_ksh=amount_ksh,\n            user_id=st.session_state.user_id,\n            description=f\"Upgrade to {target_tier} tier\"\n        )\n        \n        if result.get('success'):\n            st.success(\"Payment initiated! Please check your phone and enter your M-Pesa PIN.\")\n            st.info(\"Your tier will be upgraded once payment is confirmed.\")\n            \n            # Store pending upgrade\n            conn = sqlite3.connect('stock_tracker.db')\n            cursor = conn.cursor()\n            cursor.execute(\n                \"\"\"INSERT INTO transactions (user_id, transaction_type, amount_usd, amount_ksh, status) \n                   VALUES (?, ?, ?, ?, ?)\"\"\",\n                (st.session_state.user_id, f'upgrade_{target_tier}', amount_ksh/130, amount_ksh, 'pending')\n            )\n            conn.commit()\n            conn.close()\n            \n            st.session_state.show_upgrade_modal = False\n        else:\n            st.error(f\"Payment failed: {result.get('error', 'Unknown error')}\")\n\n# Make the page self-executing when accessed via Streamlit's multipage system\nif __name__ == \"__main__\":\n    show()\n","size_bytes":10682},"pages/portfolio.py":{"content":"import streamlit as st\nimport sqlite3\nfrom stock_data import get_stock_quote, NSE_STOCKS, search_stocks, convert_inr_to_usd\nfrom database import get_user_tier_limits\nimport pandas as pd\nimport plotly.express as px\nimport plotly.graph_objects as go\n\ndef show():\n    st.title(\"💼 Your Portfolio\")\n    \n    # Check session state\n    if 'user_id' not in st.session_state or not st.session_state.user_id:\n        st.error(\"Please login to access your portfolio.\")\n        return\n    \n    # Get user info\n    conn = sqlite3.connect('stock_tracker.db')\n    cursor = conn.cursor()\n    cursor.execute(\"SELECT tier, balance_usd FROM users WHERE id = ?\", (st.session_state.user_id,))\n    user_info = cursor.fetchone()\n    \n    if not user_info:\n        st.error(\"User not found\")\n        conn.close()\n        return\n    \n    tier, balance = user_info\n    tier_limits = get_user_tier_limits(tier)\n    \n    # Check if user can access portfolio\n    if tier_limits['portfolio_limit'] == 0:\n        st.warning(\"Portfolio management is not available for Free tier users. Please upgrade to Silver or higher tier.\")\n        show_upgrade_prompt()\n        conn.close()\n        return\n    \n    # Portfolio Summary\n    portfolio_data = get_portfolio_data()\n    \n    if portfolio_data:\n        total_value_inr = sum(item['current_value_inr'] for item in portfolio_data)\n        total_value_usd = convert_inr_to_usd(total_value_inr)\n        total_investment = sum(item['investment'] for item in portfolio_data)\n        total_pnl = total_value_inr - total_investment\n        total_pnl_percent = (total_pnl / total_investment) * 100 if total_investment > 0 else 0\n        \n        # Portfolio metrics\n        col1, col2, col3, col4 = st.columns(4)\n        with col1:\n            st.metric(\"Portfolio Value\", f\"₹{total_value_inr:,.2f}\")\n        with col2:\n            st.metric(\"Portfolio Value (USD)\", f\"${total_value_usd:.2f}\")\n        with col3:\n            delta_color = \"normal\" if total_pnl >= 0 else \"inverse\"\n            st.metric(\"P&L\", f\"₹{total_pnl:,.2f}\", f\"{total_pnl_percent:+.2f}%\", delta_color=delta_color)\n        with col4:\n            st.metric(\"Wallet Balance\", f\"${balance:.2f}\")\n    else:\n        st.info(\"Your portfolio is empty. Buy some stocks to get started!\")\n    \n    # Tabs for different portfolio views\n    tab1, tab2, tab3 = st.tabs([\"Holdings\", \"Buy/Sell\", \"Performance\"])\n    \n    with tab1:\n        show_holdings(portfolio_data)\n    \n    with tab2:\n        show_trading_interface(balance, tier_limits)\n    \n    with tab3:\n        show_performance(portfolio_data)\n    \n    conn.close()\n\ndef get_portfolio_data():\n    \"\"\"Get user's portfolio data with current prices\"\"\"\n    conn = sqlite3.connect('stock_tracker.db')\n    cursor = conn.cursor()\n    \n    cursor.execute(\"\"\"\n        SELECT stock_symbol, SUM(quantity) as total_quantity, \n               AVG(purchase_price) as avg_price\n        FROM portfolio \n        WHERE user_id = ? \n        GROUP BY stock_symbol \n        HAVING total_quantity > 0\n    \"\"\", (st.session_state.user_id,))\n    \n    holdings = cursor.fetchall()\n    conn.close()\n    \n    portfolio_data = []\n    \n    for symbol, quantity, avg_price in holdings:\n        quote = get_stock_quote(symbol)\n        if quote:\n            current_price = quote['current_price']\n            current_value_inr = current_price * quantity\n            investment = avg_price * quantity\n            pnl = current_value_inr - investment\n            pnl_percent = (pnl / investment) * 100 if investment > 0 else 0\n            \n            portfolio_data.append({\n                'symbol': symbol,\n                'name': NSE_STOCKS.get(symbol, symbol.replace('.NS', '')),\n                'quantity': quantity,\n                'avg_price': avg_price,\n                'current_price': current_price,\n                'investment': investment,\n                'current_value_inr': current_value_inr,\n                'pnl': pnl,\n                'pnl_percent': pnl_percent,\n                'change_percent': quote['change_percent']\n            })\n    \n    return portfolio_data\n\ndef show_holdings(portfolio_data):\n    \"\"\"Display portfolio holdings\"\"\"\n    if not portfolio_data:\n        st.info(\"No holdings to display\")\n        return\n    \n    # Create DataFrame for display\n    df_display = []\n    for item in portfolio_data:\n        df_display.append({\n            'Stock': f\"{item['name']} ({item['symbol']})\",\n            'Quantity': int(item['quantity']),\n            'Avg. Price': f\"₹{item['avg_price']:.2f}\",\n            'Current Price': f\"₹{item['current_price']:.2f}\",\n            'Investment': f\"₹{item['investment']:,.2f}\",\n            'Current Value': f\"₹{item['current_value_inr']:,.2f}\",\n            'P&L': f\"₹{item['pnl']:,.2f} ({item['pnl_percent']:+.2f}%)\",\n            'Day Change': f\"{item['change_percent']:+.2f}%\"\n        })\n    \n    df = pd.DataFrame(df_display)\n    st.dataframe(df, use_container_width=True, hide_index=True)\n    \n    # Portfolio allocation pie chart\n    if len(portfolio_data) > 1:\n        st.subheader(\"Portfolio Allocation\")\n        fig = px.pie(\n            values=[item['current_value_inr'] for item in portfolio_data],\n            names=[item['name'] for item in portfolio_data],\n            title=\"Portfolio Distribution by Value\"\n        )\n        fig.update_traces(textposition='inside', textinfo='percent+label')\n        st.plotly_chart(fig, use_container_width=True)\n\ndef show_trading_interface(balance, tier_limits):\n    \"\"\"Show buy/sell interface\"\"\"\n    st.subheader(\"🛒 Buy/Sell Stocks\")\n    \n    # Get current portfolio count\n    conn = sqlite3.connect('stock_tracker.db')\n    cursor = conn.cursor()\n    cursor.execute(\n        \"SELECT COUNT(DISTINCT stock_symbol) FROM portfolio WHERE user_id = ?\", \n        (st.session_state.user_id,)\n    )\n    current_portfolio_count = cursor.fetchone()[0]\n    conn.close()\n    \n    col1, col2 = st.columns(2)\n    \n    with col1:\n        st.write(\"**Buy Stocks**\")\n        \n        # Stock search for buying\n        buy_search = st.text_input(\"Search stock to buy\", key=\"buy_search\")\n        if buy_search:\n            results = search_stocks(buy_search)\n            if results:\n                buy_stock = st.selectbox(\n                    \"Select stock\",\n                    options=results,\n                    format_func=lambda x: f\"{x['name']} ({x['symbol']})\",\n                    key=\"buy_stock_select\"\n                )\n                \n                if buy_stock:\n                    quote = get_stock_quote(buy_stock['symbol'])\n                    if quote:\n                        st.metric(\"Current Price\", f\"₹{quote['current_price']:.2f}\")\n                        \n                        quantity = st.number_input(\"Quantity to buy\", min_value=1, value=1, key=\"buy_quantity\")\n                        total_cost_inr = quote['current_price'] * quantity\n                        total_cost_usd = convert_inr_to_usd(total_cost_inr)\n                        \n                        st.write(f\"Total Cost: ₹{total_cost_inr:,.2f} (${total_cost_usd:.2f})\")\n                        \n                        if total_cost_usd > balance:\n                            st.error(\"Insufficient balance. Please deposit more funds.\")\n                        elif current_portfolio_count >= tier_limits['portfolio_limit']:\n                            st.error(f\"Portfolio limit reached ({tier_limits['portfolio_limit']} stocks). Upgrade your tier.\")\n                        else:\n                            if st.button(\"Buy Stock\", type=\"primary\", key=\"buy_button\"):\n                                execute_buy_order(buy_stock['symbol'], quantity, quote['current_price'], total_cost_usd)\n    \n    with col2:\n        st.write(\"**Sell Stocks**\")\n        \n        # Get user's holdings for selling\n        portfolio_data = get_portfolio_data()\n        \n        if portfolio_data:\n            sell_stock = st.selectbox(\n                \"Select stock to sell\",\n                options=portfolio_data,\n                format_func=lambda x: f\"{x['name']} ({x['quantity']} shares)\",\n                key=\"sell_stock_select\"\n            )\n            \n            if sell_stock:\n                st.metric(\"Current Price\", f\"₹{sell_stock['current_price']:.2f}\")\n                st.write(f\"Available: {sell_stock['quantity']} shares\")\n                \n                sell_quantity = st.number_input(\n                    \"Quantity to sell\", \n                    min_value=1, \n                    max_value=int(sell_stock['quantity']), \n                    value=1, \n                    key=\"sell_quantity\"\n                )\n                \n                total_proceeds_inr = sell_stock['current_price'] * sell_quantity\n                total_proceeds_usd = convert_inr_to_usd(total_proceeds_inr)\n                \n                st.write(f\"Proceeds: ₹{total_proceeds_inr:,.2f} (${total_proceeds_usd:.2f})\")\n                \n                if st.button(\"Sell Stock\", type=\"secondary\", key=\"sell_button\"):\n                    execute_sell_order(sell_stock['symbol'], sell_quantity, sell_stock['current_price'], total_proceeds_usd)\n        else:\n            st.info(\"No stocks to sell\")\n\ndef execute_buy_order(symbol, quantity, price, total_cost_usd):\n    \"\"\"Execute buy order\"\"\"\n    conn = sqlite3.connect('stock_tracker.db')\n    cursor = conn.cursor()\n    \n    try:\n        # Deduct from balance\n        cursor.execute(\n            \"UPDATE users SET balance_usd = balance_usd - ? WHERE id = ?\",\n            (total_cost_usd, st.session_state.user_id)\n        )\n        \n        # Add to portfolio\n        cursor.execute(\n            \"\"\"INSERT INTO portfolio (user_id, stock_symbol, quantity, purchase_price) \n               VALUES (?, ?, ?, ?)\"\"\",\n            (st.session_state.user_id, symbol, quantity, price)\n        )\n        \n        # Record transaction\n        cursor.execute(\n            \"\"\"INSERT INTO transactions (user_id, transaction_type, amount_usd, status) \n               VALUES (?, ?, ?, ?)\"\"\",\n            (st.session_state.user_id, f'buy_{symbol}', -total_cost_usd, 'completed')\n        )\n        \n        conn.commit()\n        st.success(f\"Successfully bought {quantity} shares of {symbol}\")\n        st.rerun()\n        \n    except Exception as e:\n        conn.rollback()\n        st.error(f\"Error executing buy order: {str(e)}\")\n    finally:\n        conn.close()\n\ndef execute_sell_order(symbol, quantity, price, total_proceeds_usd):\n    \"\"\"Execute sell order\"\"\"\n    conn = sqlite3.connect('stock_tracker.db')\n    cursor = conn.cursor()\n    \n    try:\n        # Add to balance\n        cursor.execute(\n            \"UPDATE users SET balance_usd = balance_usd + ? WHERE id = ?\",\n            (total_proceeds_usd, st.session_state.user_id)\n        )\n        \n        # Remove from portfolio (FIFO basis)\n        cursor.execute(\n            \"\"\"INSERT INTO portfolio (user_id, stock_symbol, quantity, purchase_price) \n               VALUES (?, ?, ?, ?)\"\"\",\n            (st.session_state.user_id, symbol, -quantity, price)\n        )\n        \n        # Record transaction\n        cursor.execute(\n            \"\"\"INSERT INTO transactions (user_id, transaction_type, amount_usd, status) \n               VALUES (?, ?, ?, ?)\"\"\",\n            (st.session_state.user_id, f'sell_{symbol}', total_proceeds_usd, 'completed')\n        )\n        \n        conn.commit()\n        st.success(f\"Successfully sold {quantity} shares of {symbol}\")\n        st.rerun()\n        \n    except Exception as e:\n        conn.rollback()\n        st.error(f\"Error executing sell order: {str(e)}\")\n    finally:\n        conn.close()\n\ndef show_performance(portfolio_data):\n    \"\"\"Show portfolio performance charts\"\"\"\n    if not portfolio_data:\n        st.info(\"No performance data to display\")\n        return\n    \n    st.subheader(\"📊 Performance Analysis\")\n    \n    # P&L chart\n    fig = go.Figure()\n    \n    stocks = [item['name'] for item in portfolio_data]\n    pnl_values = [item['pnl'] for item in portfolio_data]\n    colors = ['green' if pnl >= 0 else 'red' for pnl in pnl_values]\n    \n    fig.add_trace(go.Bar(\n        x=stocks,\n        y=pnl_values,\n        marker_color=colors,\n        text=[f\"₹{pnl:,.0f}\" for pnl in pnl_values],\n        textposition='auto',\n    ))\n    \n    fig.update_layout(\n        title=\"Profit & Loss by Stock\",\n        xaxis_title=\"Stocks\",\n        yaxis_title=\"P&L (₹)\",\n        template=\"plotly_dark\"\n    )\n    \n    st.plotly_chart(fig, use_container_width=True)\n    \n    # Performance metrics table\n    st.subheader(\"Performance Metrics\")\n    \n    metrics_data = []\n    for item in portfolio_data:\n        metrics_data.append({\n            'Stock': item['name'],\n            'Return %': f\"{item['pnl_percent']:.2f}%\",\n            'Investment': f\"₹{item['investment']:,.2f}\",\n            'Current Value': f\"₹{item['current_value_inr']:,.2f}\",\n            'Gain/Loss': f\"₹{item['pnl']:,.2f}\"\n        })\n    \n    df_metrics = pd.DataFrame(metrics_data)\n    st.dataframe(df_metrics, use_container_width=True, hide_index=True)\n\ndef show_upgrade_prompt():\n    \"\"\"Show upgrade prompt for free tier users\"\"\"\n    st.info(\"\"\"\n    **Upgrade to unlock Portfolio Management!**\n    \n    **Silver Tier** - $10 USD\n    - Manage up to 10 stocks in portfolio\n    - Real-time trading capabilities\n    - Track performance with detailed analytics\n    \"\"\")\n    \n    if st.button(\"Upgrade Now\", type=\"primary\"):\n        st.session_state.show_upgrade_modal = True\n        st.rerun()\n\n# Make the page self-executing when accessed via Streamlit's multipage system\nif __name__ == \"__main__\":\n    show()\n","size_bytes":13597},"pages/wallet.py":{"content":"import streamlit as st\nimport sqlite3\nfrom mpesa_client import initiate_deposit\nimport pandas as pd\nfrom datetime import datetime, timedelta\nimport plotly.express as px\n\ndef show():\n    st.title(\"💰 Wallet Management\")\n    \n    # Get user balance\n    conn = sqlite3.connect('stock_tracker.db')\n    cursor = conn.cursor()\n    cursor.execute(\"SELECT balance_usd, tier FROM users WHERE id = ?\", (st.session_state.user_id,))\n    user_info = cursor.fetchone()\n    \n    if not user_info:\n        st.error(\"User not found\")\n        return\n    \n    balance_usd, tier = user_info\n    \n    # Wallet overview\n    col1, col2, col3 = st.columns(3)\n    with col1:\n        st.metric(\"Wallet Balance\", f\"${balance_usd:.2f}\")\n    with col2:\n        # Convert to KSh for display\n        balance_ksh = balance_usd * 130\n        st.metric(\"Balance (KSh)\", f\"KSh {balance_ksh:,.0f}\")\n    with col3:\n        st.metric(\"Current Tier\", tier)\n    \n    # Tabs for different wallet operations\n    tab1, tab2, tab3 = st.tabs([\"Deposit Funds\", \"Transaction History\", \"Currency Converter\"])\n    \n    with tab1:\n        show_deposit_interface()\n    \n    with tab2:\n        show_transaction_history()\n    \n    with tab3:\n        show_currency_converter()\n    \n    conn.close()\n\ndef show_deposit_interface():\n    \"\"\"M-Pesa deposit interface\"\"\"\n    st.subheader(\"💳 Deposit Funds via M-Pesa\")\n    \n    st.info(\"\"\"\n    **How it works:**\n    1. Enter your M-Pesa phone number and deposit amount\n    2. Click 'Deposit' to initiate M-Pesa STK Push\n    3. Check your phone and enter your M-Pesa PIN\n    4. Funds will be added to your wallet once payment is confirmed\n    \n    **Exchange Rate:** 1 USD = 130 KSh (approximate)\n    \"\"\")\n    \n    with st.form(\"deposit_form\"):\n        col1, col2 = st.columns(2)\n        \n        with col1:\n            phone_number = st.text_input(\n                \"M-Pesa Phone Number\",\n                placeholder=\"254712345678\",\n                help=\"Enter your phone number in format 254XXXXXXXXX\"\n            )\n        \n        with col2:\n            amount_ksh = st.number_input(\n                \"Amount (KSh)\",\n                min_value=100,\n                max_value=70000,\n                value=1300,\n                step=100,\n                help=\"Minimum: KSh 100, Maximum: KSh 70,000\"\n            )\n        \n        # Calculate USD equivalent\n        amount_usd = amount_ksh / 130\n        st.write(f\"**Equivalent:** ${amount_usd:.2f} USD will be added to your wallet\")\n        \n        submit_button = st.form_submit_button(\"Deposit Funds\", type=\"primary\")\n        \n        if submit_button:\n            if not phone_number:\n                st.error(\"Please enter your M-Pesa phone number\")\n            elif len(phone_number) < 12:\n                st.error(\"Please enter a valid phone number (e.g., 254712345678)\")\n            else:\n                process_deposit(phone_number, amount_ksh, amount_usd)\n\ndef process_deposit(phone_number, amount_ksh, amount_usd):\n    \"\"\"Process M-Pesa deposit\"\"\"\n    with st.spinner(\"Initiating M-Pesa payment...\"):\n        result = initiate_deposit(\n            phone_number=phone_number,\n            amount_ksh=amount_ksh,\n            user_id=st.session_state.user_id,\n            description=\"Stock Tracker Hub Wallet Deposit\"\n        )\n        \n        if result.get('success'):\n            # Record pending transaction\n            conn = sqlite3.connect('stock_tracker.db')\n            cursor = conn.cursor()\n            \n            cursor.execute(\n                \"\"\"INSERT INTO transactions (user_id, transaction_type, amount_usd, amount_ksh, status) \n                   VALUES (?, ?, ?, ?, ?)\"\"\",\n                (st.session_state.user_id, 'deposit', amount_usd, amount_ksh, 'pending')\n            )\n            conn.commit()\n            conn.close()\n            \n            st.success(\"🎉 Payment initiated successfully!\")\n            st.info(\"\"\"\n            **Next Steps:**\n            1. Check your phone for M-Pesa payment prompt\n            2. Enter your M-Pesa PIN to complete the payment\n            3. Your wallet will be credited once payment is confirmed\n            4. This may take a few minutes\n            \"\"\")\n            \n            # Show payment details\n            st.write(\"**Payment Details:**\")\n            st.write(f\"- Amount: KSh {amount_ksh:,}\")\n            st.write(f\"- USD Equivalent: ${amount_usd:.2f}\")\n            st.write(f\"- Checkout Request ID: {result.get('checkout_request_id', 'N/A')}\")\n            \n        else:\n            st.error(f\"❌ Payment failed: {result.get('error', 'Unknown error')}\")\n            \n            if 'offline' in result.get('error', '').lower():\n                st.warning(\"Your phone appears to be offline. Please ensure your phone is on and try again.\")\n            elif 'timeout' in result.get('error', '').lower():\n                st.warning(\"Request timed out. Please try again.\")\n\ndef show_transaction_history():\n    \"\"\"Display transaction history\"\"\"\n    st.subheader(\"📊 Transaction History\")\n    \n    conn = sqlite3.connect('stock_tracker.db')\n    cursor = conn.cursor()\n    \n    # Get transaction history\n    cursor.execute(\"\"\"\n        SELECT transaction_type, amount_usd, amount_ksh, mpesa_receipt, \n               status, created_at\n        FROM transactions\n        WHERE user_id = ?\n        ORDER BY created_at DESC\n        LIMIT 50\n    \"\"\", (st.session_state.user_id,))\n    \n    transactions = cursor.fetchall()\n    conn.close()\n    \n    if transactions:\n        # Create DataFrame for display\n        df_display = []\n        for trans in transactions:\n            trans_type, amount_usd, amount_ksh, receipt, status, created_at = trans\n            \n            # Format transaction type\n            if trans_type.startswith('buy_'):\n                display_type = f\"Buy {trans_type.split('_')[1]}\"\n            elif trans_type.startswith('sell_'):\n                display_type = f\"Sell {trans_type.split('_')[1]}\"\n            elif trans_type.startswith('upgrade_'):\n                display_type = f\"Upgrade to {trans_type.split('_')[1]}\"\n            else:\n                display_type = trans_type.title()\n            \n            # Format amounts\n            amount_display = f\"${amount_usd:.2f}\"\n            if amount_ksh:\n                amount_display += f\" (KSh {amount_ksh:,.0f})\"\n            \n            df_display.append({\n                'Date': created_at.split()[0] if isinstance(created_at, str) else created_at,\n                'Type': display_type,\n                'Amount': amount_display,\n                'Status': status.title(),\n                'Receipt': receipt or '-'\n            })\n        \n        df = pd.DataFrame(df_display)\n        st.dataframe(df, use_container_width=True, hide_index=True)\n        \n        # Transaction statistics\n        col1, col2, col3 = st.columns(3)\n        with col1:\n            total_transactions = len(transactions)\n            st.metric(\"Total Transactions\", total_transactions)\n        \n        with col2:\n            completed_transactions = len([t for t in transactions if t[4] == 'completed'])\n            st.metric(\"Completed\", completed_transactions)\n        \n        with col3:\n            pending_transactions = len([t for t in transactions if t[4] == 'pending'])\n            st.metric(\"Pending\", pending_transactions)\n        \n        # Transaction chart (last 30 days)\n        if len(transactions) > 1:\n            show_transaction_chart(transactions)\n    \n    else:\n        st.info(\"No transaction history found\")\n        st.write(\"Start by making a deposit to see your transaction history here.\")\n\ndef show_transaction_chart(transactions):\n    \"\"\"Show transaction chart\"\"\"\n    st.subheader(\"Transaction Trends (Last 30 Days)\")\n    \n    # Process data for chart\n    chart_data = {}\n    for trans in transactions:\n        created_at = trans[5]\n        amount_usd = trans[1]\n        \n        # Parse date\n        if isinstance(created_at, str):\n            date = datetime.strptime(created_at, '%Y-%m-%d %H:%M:%S').date()\n        else:\n            date = created_at.date()\n        \n        # Only include last 30 days\n        if date >= (datetime.now().date() - timedelta(days=30)):\n            date_str = date.strftime('%Y-%m-%d')\n            if date_str not in chart_data:\n                chart_data[date_str] = 0\n            chart_data[date_str] += abs(amount_usd)\n    \n    if chart_data:\n        df_chart = pd.DataFrame(list(chart_data.items()))\n        df_chart.columns = ['Date', 'Volume']\n        \n        fig = px.line(\n            df_chart,\n            x='Date',\n            y='Volume',\n            title='Transaction Volume Over Time',\n            markers=True\n        )\n        \n        fig.update_layout(\n            xaxis_title='Date',\n            yaxis_title='Volume (USD)'\n        )\n        \n        st.plotly_chart(fig, use_container_width=True)\n\ndef show_currency_converter():\n    \"\"\"Currency conversion calculator\"\"\"\n    st.subheader(\"💱 Currency Converter\")\n    \n    # Current exchange rates (in practice, these would be fetched from an API)\n    usd_to_ksh = 130.0\n    ksh_to_usd = 1 / usd_to_ksh\n    \n    st.info(f\"**Current Exchange Rate:** 1 USD = {usd_to_ksh} KSh\")\n    \n    col1, col2 = st.columns(2)\n    \n    with col1:\n        st.write(\"**USD to KSh**\")\n        usd_amount = st.number_input(\"Amount (USD)\", min_value=0.0, value=10.0, step=0.01, key=\"usd_input\")\n        ksh_result = usd_amount * usd_to_ksh\n        st.success(f\"${usd_amount:.2f} = **KSh {ksh_result:,.2f}**\")\n    \n    with col2:\n        st.write(\"**KSh to USD**\")\n        ksh_amount = st.number_input(\"Amount (KSh)\", min_value=0.0, value=1300.0, step=1.0, key=\"ksh_input\")\n        usd_result = ksh_amount * ksh_to_usd\n        st.success(f\"KSh {ksh_amount:,.0f} = **${usd_result:.2f}**\")\n    \n    # M-Pesa limits information\n    st.subheader(\"📝 M-Pesa Transaction Limits\")\n    \n    limits_info = \"\"\"\n    **Daily Transaction Limits:**\n    - Minimum transaction: KSh 100\n    - Maximum single transaction: KSh 70,000\n    - Maximum daily limit: KSh 140,000\n    \n    **Fees (Standard M-Pesa Rates):**\n    - KSh 100 - 500: KSh 11\n    - KSh 501 - 1,000: KSh 15\n    - KSh 1,001 - 5,000: KSh 25\n    - KSh 5,001 - 70,000: KSh 50\n    \n    *Fees are deducted from your M-Pesa account*\n    \"\"\"\n    \n    st.info(limits_info)\n\n# Make the page self-executing when accessed via Streamlit's multipage system\nif __name__ == \"__main__\":\n    show()\n","size_bytes":10422}},"version":1}